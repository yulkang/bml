function [D, S, log_file] = keep_log(file, base_caller, opt, varargin)
% [D, S, log_file] = keep_log(file, base_caller, opt, ['additional_info1', info1, ...])
%
% OPT (S):
% ----------------------------
% 'prefix',   '_header/', ...
% 'postfix',  '.log.json', ...
% 'save_log', true, ...
% 'verbose',  true, ...
% 'commit_changes', 'ask', ... 'yes', 'no', 'ask'
% 'confirm_commit_comment', true, ...
% 'exclude_from_base_caller', {}, ...
%
% ADDITIONAL INFO (D):
% ----------------------------
% 'orig_file',      file, ...
% 'comment',        '', ...
% 'base_caller',    '', ...
% 'repo',           '', ...
% 'hash',           '', ...
% 'datestr',        '', ...
% 'commit_message', '', ...
% 'data_files',     {}, ...
% 'path',           path, ...
%
% See also: logging, PsyLib
%
% 2013 (c) Yul Kang. See help PsyLib for the license.

% Options
S = varargin2S(opt, { ...
    'prefix',   '_header/', ...
    'postfix',  '.log.json', ...
    'save_log', true, ...
    'verbose',  true, ...
    'commit_changes', 'ask', ... 'yes', 'no', 'ask'
    'confirm_commit_comment', true, ...
    'exclude_from_base_caller', {}, ...
    });

S.commit_changes = validatestring(S.commit_changes, {'yes', 'no', 'ask'});

% Additional info
D = varargin2S(varargin, { ...
    'orig_file',      file, ...
    'comment',        '', ...
    'base_caller',    '', ...
    'repo',           '', ...
    'hash',           '', ...
    'datestr',        '', ...
    'commit_message', '', ...
    'data_files',     {}, ...
    'path',           '', ... % Keep pathdef.m on git. It's too much to save every time. % path, ...
    'COMPUTER_SHORT_NAME', '', ...
    });

% Fill in required info. Enforce base_caller to be a path.
if ~exist('base_caller', 'var') || isempty(base_caller)
    base_caller = baseCaller([S.exclude_from_base_caller, {mfilename('fullpath')}], ...
        'base_fallback', 'pwd');
    
elseif exist(base_caller, 'dir')
    if base_caller(end) ~= filesep
        base_caller = [base_caller, filesep]; % put filesep to signify that it's a directory.
    end
    
elseif exist(base_caller, 'file')
    base_caller = which(base_caller);
    
else
    base_caller2 = which(base_caller);
    if isempty(base_caller2)
        error('BaseCaller should be an existing file or directory!');
    else
        base_caller = base_caller2;
    end
end

if isempty(D.COMPUTER_SHORT_NAME)
    try
        D.COMPUTER_SHORT_NAME = COMPUTER_SHORT_NAME;
    catch err
        warning(err_msg(err));
    end
end

% Commit
D = mergeStruct(D, ...
    logging.commit_if_changed(base_caller, {D}, S));

% Get file name.
[pth, nam, ext] = fileparts(file);

log_file = fullfile(pth, [S.prefix, nam, ext, S.postfix]);

savejson('', D, log_file);

if S.verbose
    fprintf('Logged to %s (click to open in editor)\n', cmd2link(sprintf('edit(''%s'')', log_file), log_file));
end